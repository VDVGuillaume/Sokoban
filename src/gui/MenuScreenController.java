package gui;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;

import java.io.IOException;

import domein.DomainController;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.control.ComboBox;

import javafx.scene.control.Hyperlink;

public class MenuScreenController extends GridPane {
	private DomainController domainController;
	private ObservableList languages;

	@FXML
	private Label lblWelcomeUsername;
	@FXML
	private ComboBox comboBoxLanguage;
	@FXML
	private Hyperlink linkPlay;
	@FXML
	private Hyperlink linkQuit;
	@FXML
	private Hyperlink linkCreateNewGame;
	@FXML
	private Hyperlink linkEditGame;

	public MenuScreenController(DomainController domainController) {
		this.domainController = domainController;

		languages = FXCollections.observableArrayList();
		languages.addAll("English", "Nederlands", "Français");

		FXMLLoader loader = new FXMLLoader(getClass().getResource("MenuScreen.fxml"));
		loader.setController(this);
		loader.setRoot(this);

		try {
			loader.load();
			loadLanguageChoices();
			loadData();
		} catch (IOException ex) {
			throw new RuntimeException(ex);
		}
	}

	private void loadData() {

		String[] userInfo = domainController.getInfoUser();
		String username = userInfo[0];
		boolean isAdmin = userInfo[1].equals("True");

		// set translations
		lblWelcomeUsername.setText(domainController.translate("WelcomeUser").replace("$username", username));
		linkPlay.setText(domainController.translate("Menu_PlayGame"));
		linkQuit.setText(domainController.translate("Menu_Quit"));
		if (isAdmin) {
			linkCreateNewGame.setDisable(false);
			linkCreateNewGame.setVisible(true);
			linkEditGame.setDisable(false);
			linkEditGame.setVisible(true);

			linkCreateNewGame.setText(domainController.translate("Menu_CreateNewGame"));
			linkEditGame.setText(domainController.translate("Menu_EditGame"));
		} else {
			linkCreateNewGame.setDisable(true);
			linkCreateNewGame.setVisible(false);
			linkEditGame.setDisable(true);
			linkEditGame.setVisible(false);
		}
	}

	private void loadLanguageChoices() {
		int domainLanguage = domainController.getLanguage() - 1;
		comboBoxLanguage.getItems().clear();
		comboBoxLanguage.getItems().addAll(languages);
		comboBoxLanguage.setValue(languages.get(domainLanguage).toString());
	}

	// Event Listener on ComboBox[#comboBoxLanguage].onAction
	@FXML
	public void languageChoiceChanged(ActionEvent event) {
		int domainLanguage = domainController.getLanguage();
		int selectedLanguage = languages.indexOf(comboBoxLanguage.getValue()) + 1;

		if (domainLanguage != selectedLanguage) {
			domainController.setLanguage(selectedLanguage);
			loadData();
			event.consume();
		}
	}

	// Event Listener on Hyperlink[#linkPlay].onAction
	@FXML
	public void linkPlayOnAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Hyperlink[#linkQuit].onAction
	@FXML
	public void linkQuitOnAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Hyperlink[#linkCreateNewGame].onAction
	@FXML
	public void linkCreateNewGameOnAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Hyperlink[#linkEditGame].onAction
	@FXML
	public void linkEditGameOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
}
